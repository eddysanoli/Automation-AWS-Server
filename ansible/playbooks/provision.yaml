# Target all hosts in the inventory
- hosts: "*"

  # Name of the playbook
  name: Provision the Gaming Server

  # Make it so that Ansible can "escalate" to root
  # (i.e. run commands using sudo)
  become: true

  # ============================================ #
  # VARIABLES                                    #
  # ============================================ #

  vars:
    - server_timezone: "America/Guatemala"
    - aws_region: "us-east-2"
    - bucket_name: "gaming-server-data"
    - terraria_version: "1449"
    - minecraft_server_jar_url: "https://piston-data.mojang.com/v1/objects/f69c284232d7c7580bd89a5a4931c3581eae1378/server.jar"
    - minecraft_server_path: "/home/ubuntu/minecraft"
    - minecraft_worlds_path: "/home/ubuntu/minecraft/worlds"
    - terraria_server_path: "/home/ubuntu/terraria"
    - terraria_worlds_path: "/home/ubuntu/.local/share/Terraria/Worlds"

  # ============================================ #
  # TASKS                                        #
  # ============================================ #

  tasks:
    # ============================================ #
    # SERVER SETUP                                 #
    # ============================================ #

    - name: Update Server Packages
      apt:
        update_cache: yes
        upgrade: yes

    # Dependencies:
    # - tmux: Create sessions that remain opened even after a SSH connection is closed
    # - unzip: To unzip the Terraria server files
    # - awscli: Use S3 bucket as persistant storage
    - name: Install Required Server Packages
      apt:
        name:
          - tmux
          - unzip
          - awscli
        state: present

    # Check if the crontab for root exists. If it does, then the crontab
    # is emptied.
    - name: Remove All Cronjobs if Crontab Exists
      become: true
      shell: |
        if [ $(crontab -l | wc -c) -ne 0 ]; then
          crontab -r
          echo "Reset Root Crontab"
        fi

    # Setting the timezone for the server to be in the same timezone as
    # the user's computer. Change it via the "server_timezone" variable.
    - name: Change the Server Timezone
      become: true
      shell: "timedatectl set-timezone {{ server_timezone }}"

    # ============================================== #
    # MINECRAFT                                      #
    # ============================================== #

    # Has to be installed through shell commands because
    # using the Ansible apt module causes the installation
    # to crash for some reason
    - name: Install Java
      become: true
      shell: apt install -y openjdk-17-jdk

    # ============================================ #

    - name: Create the Root Minecraft Folder with Appropriate Permissions (777)
      file:
        path: "{{ minecraft_server_path }}"
        state: directory
        mode: "0777"

    - name: Download the Latest Minecraft Server .jar
      get_url:
        url: "{{ minecraft_server_jar_url }}"
        dest: "{{ minecraft_server_path }}/server.jar"
        mode: "0755"

    # ============================================ #

    # The EULA needs to be copied, or you will have to manually accept it
    - name: Copy Minecraft Server Configuration Files
      copy:
        src: "/opt/ansible/storage/minecraft/{{ item }}"
        dest: "{{ minecraft_server_path }}/{{ item }}"
        mode: "0777"
      loop:
        - "server.properties"
        - "eula.txt"
        - "server-icon.png"
        - "start_server.sh"

    # ============================================ #

    - name: Create the Worlds Folder with Appropriate Permissions (777)
      file:
        path: "{{ minecraft_worlds_path }}"
        state: directory
        mode: "0777"

    # Copy the initially existing files from the S3 bucket to the server
    - name: Copy Files from S3 Bucket to Minecraft Worlds Folder
      shell: "aws s3 sync s3://{{ bucket_name }}/minecraft/ {{ minecraft_worlds_path }}"

    # Make it possible to change the synced files
    - name: Set Read Write Permissions for Minecraft Worlds Files
      command: chmod -R 0777 {{ minecraft_worlds_path }}

    # Every couple of minutes, all the Minecraft worlds will be synced to the
    # S3 bucket used for persistant storage
    - name: Cronjob to Backup Minecraft Worlds to S3 Bucket
      cron:
        name: "Sync Minecraft Worlds to S3 Bucket"
        minute: "*/2"
        job: "aws s3 sync {{ minecraft_worlds_path }} s3://{{ bucket_name }}/minecraft/"

    # ============================================== #
    # TERRARIA                                       #
    # ============================================== #

    - name: Create the Root Terraria Folder
      file:
        path: "{{ terraria_server_path }}"
        state: directory
        mode: "0755"

    # ============================================ #

    - name: Download the Latest Terraria Server .zip
      get_url:
        url: https://terraria.org/api/download/pc-dedicated-server/terraria-server-{{ terraria_version }}.zip
        dest: "{{ terraria_server_path }}/terraria-server.zip"
        mode: "0755"

    - name: Unzip the Terraria Server .zip
      unarchive:
        src: "{{ terraria_server_path }}/terraria-server.zip"
        dest: "{{ terraria_server_path }}"
        remote_src: yes

    - name: Remove the Terraria Server .zip
      file:
        path: "{{ terraria_server_path }}/terraria-server.zip"
        state: absent

    - name: Remove the Mac and Windows Terraria Server Files
      file:
        path: "{{ terraria_server_path}}/{{ terraria_version }}/{{ item }}"
        state: absent
      loop:
        - "Mac"
        - "Windows"

    # ============================================ #

    - name: Add Executable Permissions to the Server Binary
      file:
        path: "{{ terraria_server_path }}/{{ terraria_version }}/Linux/TerrariaServer.bin.x86_64"
        mode: "0755"

    - name: Copy the Terraria Starting Script
      copy:
        src: "/opt/ansible/storage/terraria/start_server.sh"
        dest: "{{ terraria_server_path }}/start_server.sh"
        mode: "0755"

    # The location of the server executable is different for each Terraria
    # version. We set executable used by "start_server.sh" here, by changing
    # the "$TERRARIA_VERSION" text in the script with the actual version.
    #
    #     eg. "path/$TERRARIA_VERSION/" -> "path/1449/"
    #
    - name: Replace Terraria Version in Starting Script
      replace:
        path: "{{ terraria_server_path }}/start_server.sh"
        regexp: "TERRARIA_VERSION"
        replace: "{{ terraria_version }}"
        mode: "0777"

    - name: Copy the Terraria Server Config
      copy:
        src: "/opt/ansible/storage/terraria/serverconfig.txt"
        dest: "{{ terraria_server_path }}/{{ terraria_version }}/Linux/serverconfig.txt"
        mode: "0777"

    # ============================================ #

    # The Terraria server constantly creates a .bak file for your world next to the
    # world file. By default the program won't have permissions to create this file,
    # and will crash trying to backup.
    - name: Create and add Permissions to "Terraria/Worlds" to Allow the Creation of World Backups
      file:
        path: "{{ terraria_worlds_path }}"
        state: directory
        mode: "0777"

    # We make sure to just copy the world files. If this is not done, the world backup
    # files will be copied as well, and if the server detects an already existing ".bak"
    # file, it will create a new one (".bak2"). To prevent the server from having more and
    # more backup files, we make sure to just copy the world files.
    - name: Copy Files from S3 Bucket to Terraria Worlds Folder
      shell: 'aws s3 sync s3://{{ bucket_name }}/terraria/ {{ terraria_worlds_path }} --exclude "*" --include "*.wld"'

    - name: Set Read Write Permissions for Terraria World Files
      command: chmod -R 0777 {{ terraria_worlds_path }}

    # The command to exclude all files except ".wld" files was fetched from here:
    # https://stackoverflow.com/questions/23895419/
    - name: Cron Job to Backup Terraria Worlds to S3 Bucket
      cron:
        name: "Sync Terraria Worlds to S3 Bucket"
        minute: "*/2"
        job: 'aws s3 sync {{ terraria_worlds_path }} s3://{{ bucket_name }}/terraria/ --exclude "*" --include "*.wld"'
